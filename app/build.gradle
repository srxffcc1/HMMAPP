apply plugin: 'com.android.application'
apply plugin: 'walle'
apply from: 'tinker-support.gradle'

def static releaseTime() {
    def date = new Date()
    def versionCode = date.format('yyyy-MM-dd-HH-mm-ss')
    return versionCode
}

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
android {
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false
    signingConfigs {
        config {
            keyAlias 'client'
            keyPassword 'clientclient'
            storeFile file('../client.jks')
            storePassword 'clientclient'
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.health.client"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        flavorDimensions 'client'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
        renderscriptTargetApi 19
        renderscriptSupportModeEnabled true    // Enable RS support

        vectorDrawables.useSupportLibrary = true
        aaptOptions { cruncherEnabled = false }

        multiDexEnabled true
        ndk {
            // 设置支持的SO库架构
            if('32' ==versionLib){

                abiFilters 'armeabi-v7a'//,'x86', 'x86_64', 'arm64-v8a',,armeabi-v7a
            }else {

                abiFilters 'arm64-v8a'//,'x86', 'x86_64', 'arm64-v8a',,armeabi-v7a
            }

        }
        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "21ebd57cbcfb0f795b8826bb", //JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
                qqappid      : "101561118"//暂时填写一下而已
        ]
    }
    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
            proguardFile './proguard-rules.pro'

        }
        check {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
            proguardFile './proguard-rules.pro'
        }
        product {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
            proguardFile './proguard-rules.pro'
        }
        debug {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
            proguardFile './proguard-rules.pro'
        }
    }
//    android.applicationVariants.all { variant ->
//        variant.outputs.all {
//            outputFileName = "client_v${variant.versionName}_${releaseTime()}.apk"
//        }
//    }
//    productFlavors {
//        local {}
//        remote {}
//        localRemote {}
//        oppo {}
//        vivo {}
//        meizu {}
//        huawei {}
//        ali {}
//        lenovo {}
//        yyb {}
//        c360 {}
//        bd {}
//        xiaomi {}
//        samsung {}
//    }
    walle {
        // 指定渠道包的输出路径

        if('32' ==versionLib){

            apkOutputFolder = new File("${project.getProjectDir()}/channels/");
            // 定制渠道包的APK的文件名称
            apkFileNameFormat = '${channel}-v${versionCode}.apk';
            // 渠道配置文件
            channelFile = new File("${project.getProjectDir()}/channel")
        }else {

            apkOutputFolder = new File("${project.getProjectDir()}/channels/");
            // 定制渠道包的APK的文件名称
            apkFileNameFormat = '${channel}-v${versionCode}-64.apk';
            // 渠道配置文件
            channelFile = new File("${project.getProjectDir()}/channel")
        }


    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.multidex:multidex:2.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    annotationProcessor 'com.alibaba:arouter-compiler:1.2.2'
    if (!rootProject.ext.isIndexModule) {
        implementation project(':hmm-index')
    }
    if (!rootProject.ext.isFaqModule) {
        implementation project(':hmm-faq')
    }
    if (!rootProject.ext.isMallModule) {
        implementation project(':hmm-mall')
    }
    if (!rootProject.ext.isMineModule) {
        implementation project(':hmm-mine')
    }
    if (!rootProject.ext.isCityModule) {
        implementation project(':hmm-city')
    }
//    if (!rootProject.ext.isServiceModule) {//在融合之后删除这里
//        implementation project(':service')
//    }
    if (!rootProject.ext.isServiceCenterModule) {//在融合之后删除这里
        implementation project(':hmm-servicecenter')
    }
    if (!rootProject.ext.isServiceCenterModule) {
        implementation project(':hmm-second')
    }
    if (!rootProject.ext.isDiscountModule) {
        implementation project(':hmm-discount')
    }
//    if (!rootProject.ext.isSoundModule) {
//        implementation project(':hmm-sound')
//    }
    if (!rootProject.ext.isTencentLiveModule) {
        implementation project(':hmm-tencent-live')
    }
    implementation project(':library')
    kapt "com.alibaba:arouter-compiler:1.2.2"
}
// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use

